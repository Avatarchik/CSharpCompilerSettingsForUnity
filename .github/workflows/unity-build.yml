# Secrets
#   ULF_REPO: Git repository url contains ulf files. https://mob-sakai:{{token}}@github.com/mob-sakai/ulfs.git
#   WORKING_DIR: Unity project path (default: '.')
name: unity-test

on:
  push:
    branches:
      - develop
    tags:
      - "!*"
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  build-unity:
    strategy:
      fail-fast: false
      matrix:
        unity:
          [
            "2018.4.25f1",
            "2019.4.10f1",
            "2020.1.0f1",
            "2020.1.1f1",
            "2020.1.2f1",
            "2020.1.3f1",
            "2020.1.4f1",
            "2020.1.5f1",
          ]

    runs-on: ubuntu-latest
    container:
      # Use Unity image from https://hub.docker.com/r/gableroux/unity3d/tags
      image: gableroux/unity3d:${{ matrix.unity }}

    steps:
      # Activate Unity Editor
      - name: Activate Unity Editor
        id: activation
        run: |
          # Clone ulfs.
          apt update && apt install git -y
          git clone --depth 1 ${{ secrets.ULF_REPO }} .ulfs

          # Activate with ulf.
          ULF_FILE=.ulfs/Unity_v${{ matrix.unity }}.ulf
          echo $ULF_FILE
          if [ -e ${ULF_FILE} ]; then
            /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -manualLicenseFile ${ULF_FILE} \
              | grep -E 'LICENSE SYSTEM.*\w{32} != \w{32}' && FAILED=true
          else
            echo "::error:: ulf file '${ULF_FILE}' is not found."
            FAILED=true
          fi

          # Activation failed.
          if [ $FAILED ]; then
            echo "::set-env name=UNITY_VERSION::`echo ${{ matrix.unity }} | cut -d '-' -f 1`"
            echo "::error:: the unity activation may have failed. manual activation is required.%0A \
              1. download the artifact's .alf file.%0A \
              2. Go to https://license.unity3d.com/manual to activate manually.%0A \
              3. Generate a .ulf file from the .alf file and download it.%0A \
              4. Rename .ulf to 'Unity_v${{ matrix.unity }}.ulf'.%0A \
              5. Add file to ulfs repository.%0A \
              5. Re-run the jobs."

            /opt/Unity/Editor/Unity -quit -batchmode -nographics -logFile -createManualActivationFile
            exit 1
          fi

          # Set working directory.
          WORKING_DIR="${{ secrets.WORKING_DIR }}"
          echo "::set-env name=WORKING_DIR::${WORKING_DIR:-.}"

      # (On failed activation) Upload unity activation file
      - name: Upload unity activation file
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Unity_v${{ matrix.unity }}.alf
          path: ./*.alf

      # Checkout
      - uses: actions/checkout@v2

      # Test 1: Build
      - name: "Test 1: Build"
        if: always() && steps.activation.conclusion == 'success'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath .

      # Test 2: Install via UPM
      - name: "Test 2: Install via UPM (1)"
        if: always() && steps.activation.conclusion == 'success'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath ./Test
